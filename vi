#!/bin/bash
# vim-switch

#  * open vim instances in the specified screen session
#  * open the (optional) terminal window and bring it to front
#  * switch to existing vim instance in the specified screen session
#  * when run from vim (with :!vi or shift-V) display the list of opened files
#
# (c) 2013-2015 Luc Deschenaux
# LICENSE: GPLv3 - http://www.gnu.org/licenses/gpl-3.0.txt

# TODO: update the WINDOWID file (.wid) after a screen -r
# TODO: handle multiple terminal windows / screen sessions
# TODO: use the current terminal window when no screen session is active
# TODO: use getopts in getfilename(), handle multiple file names and forward options to vim

# comment the line below if you dont want to open terminal windows
# or set it to your favourite terminal command
TERMINAL=gnome-terminal
#TERMINAL=xterm

VIM=$(which vim)

# the default screen session is named vim
[ -z "$SCREEN_SESSION" ] && SCREEN_SESSION=vim

# detect whether this script is run from vim
if [ "$(ps -o cmd= $PPID 2>/dev/null | cut -f 1 -d ' ')" = "$VIM" ] ; then
    FROMVIM=true
fi

main() {

  # when a X terminal is defined, run vim_fromX; but not from vim or from the target screen session.
  if [ -n "$TERMINAL" ] && [ -z "$FROMVIM" ] && [ -n "$DISPLAY" ] && [ "$(echo $STY | cut -f 2 -d '.')" != "$SCREEN_SESSION" ] ; then
    vim_fromX $@

  else
    vim_fromTerm $@

  fi
}

vim_fromX() {

  # get the pid for the target screen session
  SCREEN_PID=$(screen -ls 2>/dev/null | grep -E -e '[0-9]+\.'$SCREEN_SESSION | awk -F . '{print $1}' | xargs)

  # get the FILEPATH
  getfilename $@

  # create the screen session if not already exists
  if [ -z "$SCREEN_PID" ] ; then

    # we need to get the terminal WINDOWID
    WID_FILE=$(mktemp -u)

    # change to the file directory
    cd $(dirname $FILEPATH)

    # open a terminal window for the new screen session
    $TERMINAL -e "screen -S $SCREEN_SESSION -t '' bash" &

    count=0
    while [ -z "$SCREEN_PID" ] ; do
      # get the screen session PID
      SCREEN_PID=$(screen -ls | grep -E -e '[0-9]+\.'$SCREEN_SESSION | awk -F . '{print $1}' | xargs)
      sleep 0.1
      (( ++count > 1000 )) && exit 1
    done

    # get the X terminal WINDOWID
    screen -S $SCREEN_SESSION -X stuff "echo \$WINDOWID > $WID_FILE && clear\n"

    count=0
    # wait for the X terminal WINDOWID
    while [ ! -f $WID_FILE ] ; do
      sleep 0.1 
      (( ++count > 1000 )) && exit 1
    done

    # rename the temporary WINDOWID file
    mv $WID_FILE /tmp/${SCREEN_PID}.wid

  fi

  # get the WINDOWID for the SCREEN_SESSION
  WID=$(cat /tmp/${SCREEN_PID}.wid)

  # open the specified file with a recursive call
  screen -S $SCREEN_SESSION -X screen -t '' vi $FILEPATH

  # bring the terminal window to front
  [ -n "$WID" ] && wmctrl -i -a $WID 2>/dev/null && exit

  # if the window does not exists, open a new terminal and reattach 
  # TODO: find a way to update the WINDOWID without opening a new terminal, when possible.
  TMPSCRIPT=$(mktemp -u)
  cat > $TMPSCRIPT << EOF

#!/bin/bash
echo \$WINDOWID > /tmp/${SCREEN_PID}.wid
rm $TMPSCRIPT
screen -rd $SCREEN_SESSION
EOF

  chmod +x $TMPSCRIPT
  $TERMINAL -e $TMPSCRIPT &
}

vim_fromTerm() {

    MYSHELL_SCREEN=$(screenpid $PPID)
    WD=$PWD

    # no parameters, open vim instance selection dialog if any
    [ $# -eq 0 ] && selectExistingVimInstance

    # switch to existing vim instance if possible
    getfilename $@ && switchToExistingVimInstance $@
    [ -f "$TMPLIST" ] && rm $TMPLIST

    # exit if called from vim
    [ -n "$FROMVIM" ] && exit 0

    # else run vim normally, if not called from vim
    cd $WD
    exec $VIM $@
}

screenpid() {

  shopt -s nocasematch

  _PID=$1

  while ! [[ $(ps -o cmd= $_PID 2>/dev/null) =~ ^SCREEN ]] ; do
    _PID=$(ps -o ppid= $_PID 2>/dev/null) || return 1
  done

  echo $_PID

}

getVimInstances() {
    # get pid ppid pts and filename list for vim instances
    TMPLIST=$(mktemp -u)
    ps -Af |
    grep $VIM |
    awk '{printf("%s %s %s",$2,$3,$6);for(i=8;i<=NF;++i)printf(" %s",$i);printf("%c","\n")}' > $TMPLIST
}

getfilename() {
# strip options from arguments and return the real path in FILEPATH variable
# return an error when many filenames are specified or file does not exists

    while [ $# -gt 0 ] ; do
        if [ "${1:0:1}" != '-' ] ; then
            # error when many filenames are specified
            [ -n "$FILENAME" ] && return 1
            FILENAME="$1"
        fi
        shift
    done

    FILEPATH=$(realpath "$FILENAME")
}

switchToExistingVimInstance() {

    # get pid ppid pts and filename list for vim instances
    [ -f "$TMPLIST" ] || getVimInstances

    # search an existing vim instance for FILEPATH
    while read PID_PPID_PTS_RELPATH ; do
        [ -f "$TMPLIST" ] && rm $TMPLIST

        ARRAY=($PID_PPID_PTS_RELPATH)
        VIM_PID=${ARRAY[0]}
        VIM_PPID=${ARRAY[1]}
        VIM_PTS=${ARRAY[2]}
        VIM_RELPATH=${ARRAY[@]:4}

        [ -z "$VIM_RELPATH" ] && continue

        # skip when basename not in parameters
        echo "$@" | grep -q $(basename $VIM_RELPATH) || continue

        # skip when cannot change to vim directory
        cd /proc/$VIM_PID/cwd 2> /dev/null || continue

        # get real file path
        VIM_FILEPATH=$(realpath $VIM_RELPATH)

        [ "$VIM_FILEPATH" = "$FILEPATH" ] || continue

        # check whether the vim parent screen match this script parent screen
        VIM_SCREEN=$(screenpid $VIM_PPID) || continue
        if [ "$MYSHELL_SCREEN" = "$VIM_SCREEN" ] ; then

            # get the screen window number for vim parent shell
            _WINDOW=$(tr '\0' '\n' < /proc/$VIM_PID/environ | grep ^WINDOW= | cut -f 2 -d '=')

            # switch to existing vim session window
            screen -X select $_WINDOW

            # optionally kill this script parent shell
            [ -n "$KILL" ] && kill $KILL $PPID
            exit

        fi

    done < $TMPLIST

    return 1
}

selectExistingVimInstance() {
    getVimInstances

    FILE_LIST=()
    # get vim instance list sharing this script PPID
    while read PID_PPID_PTS_RELPATH ; do
        ARRAY=($PID_PPID_PTS_RELPATH)
        VIM_PID=${ARRAY[0]}
        VIM_PPID=${ARRAY[1]}

        # check whether the vim parent screen match this script parent screen
        VIM_SCREEN=$(screenpid $VIM_PPID) &&
        [ "$VIM_SCREEN" = "$MYSHELL_SCREEN" ] &&
        # and whether we can change to vim directory
        [ -d /proc/$VIM_PID/cwd/ ] &&
        cd /proc/$VIM_PID/cwd &&
        VIM_RELPATH=${ARRAY[@]:4} &&
        FILE_LIST+=("$(realpath $VIM_RELPATH)")

    done < $TMPLIST

    # show dialog
    if [ ${#FILE_LIST[*]} -ne 0 ] ; then
      FILEPATH=$(zenity --list --width 640 --height 512 --column "File" ${FILE_LIST[*]} 2> /dev/null)
      if [ -n "$FILEPATH" ] ; then
          switchToExistingVimInstance "$FILEPATH"
      fi
    fi
}

main $@

